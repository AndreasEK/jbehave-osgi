/*******************************************************************************
 * Copyright (c) 2011 - 2012, Cristiano Gavião - C4Biz
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Cristiano Gavião - initial API and implementation
 *******************************************************************************/
package org.jbehave.osgi.examples.taskweb.application;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;

@SuppressWarnings("serial")
public class LoginComponent extends CustomComponent {

	@AutoGenerated
	private GridLayout mainLayout;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private CheckBox loginRememberMe;
	@AutoGenerated
	private PasswordField loginPassword;
	@AutoGenerated
	private TextField loginUser;
	@AutoGenerated
	private Button loginButton;
	private ClickListener loginButtonClickListener;
	private ClickListener logoutClickListener;

	private static final Method ON_LOGIN_METHOD;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public LoginComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		loginUser.focus();
	}

	@AutoGenerated
	private GridLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new GridLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(false);
		mainLayout.setColumns(3);
		mainLayout.setRows(4);

		// top-level component properties
		setSizeFull();

		// loginButton
		loginButton = new Button();
		loginButton.setCaption("Login");
		loginButton.setImmediate(true);
		loginButton.setWidth("-1px");
		loginButton.setHeight("-1px");
		loginButton.setTabIndex(5);
		loginButton.setDebugId("loginButton");
		loginButton.setClickShortcut(KeyCode.ENTER);

		mainLayout.addComponent(loginButton, 2, 2);
		mainLayout.setComponentAlignment(loginButton, new Alignment(48));

		// loginUser
		loginUser = new TextField();
		loginUser.setCaption("User");
		loginUser.setImmediate(false);
		loginUser.setWidth("-1px");
		loginUser.setHeight("-1px");
		loginUser.setTabIndex(1);
		loginUser.setDebugId("loginUser");
		mainLayout.addComponent(loginUser, 0, 0);
		mainLayout.setComponentAlignment(loginUser, new Alignment(33));

		// loginPassword
		loginPassword = new PasswordField();
		loginPassword.setCaption("Password");
		loginPassword.setImmediate(false);
		loginPassword.setWidth("-1px");
		loginPassword.setHeight("-1px");
		loginPassword.setInvalidAllowed(false);
		loginPassword.setTabIndex(2);
		loginPassword.setDebugId("loginPassword");
		mainLayout.addComponent(loginPassword, 0, 1);
		mainLayout.setComponentAlignment(loginPassword, new Alignment(33));

		// loginRememberMe
		loginRememberMe = new CheckBox();
		loginRememberMe.setCaption("remember me");
		loginRememberMe.setImmediate(false);
		loginRememberMe
				.setDescription("Remember the logged user on this machine.");
		loginRememberMe.setWidth("-1px");
		loginRememberMe.setHeight("-1px");
		loginRememberMe.setTabIndex(3);
		loginRememberMe.setDebugId("loginRememberMe");
		mainLayout.addComponent(loginRememberMe, 0, 2);

		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		cancelButton.setTabIndex(4);
		cancelButton.setDebugId("cancelButton");

		mainLayout.addComponent(cancelButton, 1, 2);
		mainLayout.setComponentAlignment(cancelButton, new Alignment(48));

		return mainLayout;
	}

	@Override
	public void attach() {
		super.attach();

		loginButtonClickListener = new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				// create and dispatch a login event
				notifyLoginAttemptEvent();
			}
		};
		loginButton.addListener(loginButtonClickListener);

		logoutClickListener = new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				// create and dispatch a login event
				notifyLoginCancelEvent();
			}
		};
		cancelButton.addListener(logoutClickListener);

	}

	@Override
	public void detach() {
		loginButton.removeListener(loginButtonClickListener);
		cancelButton.removeListener(logoutClickListener);
		super.detach();
	}

	protected void notifyLoginAttemptEvent() {
		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put("username", (String) loginUser.getValue());
		params.put("password", (String) loginPassword.getValue());
		params.put("rememberMe", loginRememberMe.getValue());

		LoginEvent event = new LoginEvent(params, LoginEventType.ATTEMPT);
		fireEvent(event);
	}

	public void notifyLoginCancelEvent() {
		HashMap<String, Object> params = new HashMap<String, Object>();

		LoginEvent event = new LoginEvent(params, LoginEventType.CANCEL);
		fireEvent(event);
	}

	static {
		try {
			ON_LOGIN_METHOD = LoginAttemptListener.class.getDeclaredMethod(
					"onLoginEvent", new Class[] { LoginEvent.class });
		} catch (final java.lang.NoSuchMethodException e) {
			// This should never happen
			throw new java.lang.RuntimeException(
					"Internal error finding methods in LoginForm");
		}
	}

	/**
	 * Adds LoginClickListener to handle login logic
	 * 
	 * @param listener
	 */
	public void addLoginAttemptListener(LoginAttemptListener listener) {
		addListener(LoginEvent.class, listener, ON_LOGIN_METHOD);
	}

	/**
	 * Removes LoginClickListener
	 * 
	 * @param listener
	 */
	public void removeLoginAttemptListener(LoginAttemptListener listener) {
		removeListener(LoginEvent.class, listener, ON_LOGIN_METHOD);
	}

	public enum LoginEventType {
		ATTEMPT, CANCEL;
	}

	/**
	 * This event is sent when login form is submitted.
	 */
	public class LoginEvent extends Event {

		private final Map<String, Object> params;
		private final LoginEventType type;

		private LoginEvent(Map<String, Object> params, LoginEventType type) {
			super(LoginComponent.this);
			this.params = params;
			this.type = type;
		}

		/**
		 * Access method to form values by field names.
		 * 
		 * @param name
		 * @return value in given field
		 */
		public Object getLoginParameter(String name) {
			if (params.containsKey(name)) {
				return params.get(name);
			} else {
				return null;
			}
		}

		public LoginEventType getType() {
			return type;
		}
	}

	/**
	 * Login listener is a class capable to listen LoginEvents sent from
	 * LoginBox
	 */
	public interface LoginAttemptListener extends Serializable {
		/**
		 * This method is fired when login or cancel button are clicked.
		 * 
		 * @param event
		 */
		public void onLoginEvent(LoginEvent event);

	}

}
